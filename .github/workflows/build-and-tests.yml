name: Build and Test SLOTH on Linux and MacOS

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
jobs:
  build-linux:
    runs-on: ${{ matrix.os }}
    env: 
      CORES: $(nproc)
    strategy:
      matrix:
        os: [ubuntu-22.04]
        # os: [ubuntu-22.04, ubuntu-24.04]
        # gcc_version: [11, 14]
        # exclude:
        #   - os: ubuntu-22.04
        #     gcc_version: 14  
        #   - os: ubuntu-24.04
        #     gcc_version: 11 
    steps:
    - uses: actions/checkout@v4

    - name: Set up Spack
      uses: spack/setup-spack@v2
      with:
        ref: develop      # Spack version (examples: develop, releases/v0.21)
        buildcache: true  # Configure oci://ghcr.io/spack/github-actions-buildcache
        color: true       # Force color output (SPACK_COLOR=always)
        path: ${{github.workspace}}/spack       # Where to clone Spack

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y mpich wget unzip gfortran

    - name: Configure Spack to use system gcc and gfortran
      run: |
        GCC_VER=$(gcc -dumpversion)
        OS=$(spack arch -o)
        TARGET=$(spack arch -t)

        mkdir -p ~/.spack/${OS}
        cat <<EOF > ~/.spack/${OS}/compilers.yaml
        compilers:
          - compiler:
              spec: gcc@${GCC_VER}
              paths:
                cc: /usr/bin/gcc
                cxx: /usr/bin/g++
                f77: /usr/bin/gfortran
                fc: /usr/bin/gfortran
              flags: {}
              operating_system: ${OS}
              target: ${TARGET}
              modules: []
              environment: {}
              extra_rpaths: []
        EOF
      
    - name: Download and extract libtorch
      run: |
        wget https://download.pytorch.org/libtorch/nightly/cpu/libtorch-shared-with-deps-latest.zip
        unzip libtorch-shared-with-deps-latest.zip
        LIBTORCH_DIR=$(realpath libtorch)
        echo "LIBTORCH_DIR=$LIBTORCH_DIR" >> $GITHUB_ENV
      
    - name: Cache Spack build stage
      uses: actions/cache@v4
      with:
        path: ~/.spack/stage
        key: ${{ runner.os }}-spack-stage
        
    - name: Install MFEM
      run: |
          spack install mfem+mpi+suite-sparse+sundials+superlu-dist@4.7.0
        
    - name: Setup Python 
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install Python dependencies 
      run: python -m pip install --upgrade pip gcovr cpplint matplotlib pandas numpy scipy

    - name: Build SLOTH 
      shell: spack-bash {0}    
      run: | 
        mkdir -p ${{ github.workspace }}/build
        cd ${{ github.workspace }}/build
        bash ../envSloth.sh --coverage --libtorch=$LIBTORCH_DIR
        make -j${{ env.CORES }}
        

    - name: Test SLOTH 
      shell: spack-bash {0}    
      run: | 
        cd ${{ github.workspace }}/build
        ctest -j${{ env.CORES }} --output-on-failure

    - name: Save Tests on Failure
      if: ${{ failure() }}
      uses: actions/upload-artifact@v4
      with:
        name: test-reports-linux
        path: ${{ github.workspace }}/build/tests
        retention-days: 1

  build-MacOS:
    runs-on: macos-latest
    env: 
      CORES: $(sysctl -n hw.ncpu)
    steps:
    - uses: actions/checkout@v4

    - name: Install MFEM
      run: brew install mfem

    - name: Setup Python 
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install Python dependencies 
      run: python -m pip install --upgrade pip gcovr cpplint matplotlib pandas numpy scipy
      
    - name: Build SLOTH 
      run: | 
        mkdir -p ${{ github.workspace }}/build
        cd ${{ github.workspace }}/build
        bash ../envSloth.sh --coverage
        make -j${{ env.CORES }}

    - name: Test SLOTH 
      run: | 
        cd ${{ github.workspace }}/build
        ctest -j${{ env.CORES }} --output-on-failure

    - name: Save Tests on Failure
      if: ${{ failure() }}
      uses: actions/upload-artifact@v4
      with:
        name: test-reports-macos
        path: ${{ github.workspace }}/build/tests
        retention-days: 1

    - name: Code Coverage Analysis 
      if: ${{ always() }}
      run: | 
        cd ${{ github.workspace }}/build
        make cc

    - name: Save Code Coverage Analysis
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-report
        path: ${{ github.workspace }}/build/Coverage
        retention-days: 1
  
    - name: CppLint
      if: ${{ always() }}
      continue-on-error: true
      run: | 
        cd ${{ github.workspace }}/build
        cpplint \
        --filter=-runtime/references,-build/header_guard,-runtime/string \
        --counting=total \
        --extensions=cpp,cxx,hpp,h,hxx \
        --linelength=100 \
        --recursive ../kernel ../tests \
        COMMENT "Linting source files"
    
